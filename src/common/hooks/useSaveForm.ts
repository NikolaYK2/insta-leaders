import { useEffect } from "react";
import { LocalStorageUtil, ParamsKey } from "@/common/utils/LocalStorageUtil";

type Params<T> = {
  watch: (callback: (value: T) => void) => { unsubscribe: () => void }; // Метод для подписки на изменения формы, возвращает функцию для отписки
  reset: (data: Partial<T>) => void; // Метод для сброса значений формы
  saveValue: (value: T) => void; // Метод для сохранения значений формы
  getValue: () => Partial<T> | null; // Метод для получения начальных значений формы из другого источника
  valueKey: ParamsKey; // Ключ для хранения значения в LocalStorage
  dependencies?: unknown[]; // Дополнительные зависимости, влияющие на сброс формы
};

export const useSaveForm = <T>({
  watch,
  reset,
  valueKey,
  saveValue,
  getValue,
  dependencies = [],
}: Params<T>) => {
  // Получение данных из LocalStorage при инициализации хука
  const saveForm = LocalStorageUtil.getValue(valueKey);

  // Подписываемся на изменения формы и сохраняем значения в LocalStorage при изменениях
  useEffect(() => {
    // Подписка на изменения формы
    const subscription = watch((value: T) => {
      // Сохраняем текущее значение формы в LocalStorage
      saveValue(value);
    });
    // Отписываемся при размонтировании компонента
    return () => subscription.unsubscribe();
  }, [watch]);

  // Сбрасываем данные формы при инициализации или при изменении зависимостей
  useEffect(() => {
    if (saveForm) {
      // Если в LocalStorage есть сохраненные значения, сбрасываем форму с этими значениями
      reset(saveForm);
    } else {
      // Если в LocalStorage нет сохраненных значений, получаем начальные значения и сбрасываем форму
      const defaultValue = getValue();
      if (defaultValue) {
        reset(defaultValue);
      }
    }
    // Перезапускаем эффект при изменении зависимостей
  }, [...dependencies]);
};

/**
 * Подробные комментарии:
 * 1. Хук `useSaveForm` предназначен для работы с состоянием формы, сохраняя её значения в LocalStorage и восстанавливая их при необходимости.
 * 2. `watch` - функция, которая используется для подписки на изменения формы. При каждом изменении вызывается переданный колбэк, чтобы сохранить текущее состояние.
 * 3. `reset` - функция для сброса значений формы. Она используется для инициализации формы сохраненными или дефолтными значениями.
 * 4. `saveValue` - функция, которая сохраняет текущие значения формы в LocalStorage, чтобы они могли быть восстановлены после перезагрузки страницы.
 * 5. `getValue` - функция, которая возвращает начальные значения формы, если они не сохранены в LocalStorage.
 * 6. `valueKey` - ключ, используемый для хранения значения в LocalStorage, чтобы идентифицировать конкретную форму.
 * 7. `dependencies` - массив зависимостей, который используется для контроля над тем, когда форма должна быть сброшена. Он позволяет обновлять состояние формы при изменении внешних значений.
 * 8. Первый `useEffect` подписывается на изменения формы и сохраняет новые значения, когда форма изменяется. При размонтировании компонента отписка предотвращает утечки памяти.
 * 9. Второй `useEffect` инициализирует форму значениями из LocalStorage (если они существуют) или дефолтными значениями. Также этот эффект будет вызван при изменении зависимостей, чтобы сбросить форму.
 */
